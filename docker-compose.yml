version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: nodegram_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: nodegram
      MYSQL_USER: nodegram
      MYSQL_PASSWORD: nodegrampassword
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database.sql:/docker-entrypoint-initdb.d/database.sql
    networks:
      - nodegram_network
    command: --default-authentication-plugin=mysql_native_password

  # PHP Server
  php_server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: nodegram_php
    restart: unless-stopped
    ports:
      - "8000:80"
    volumes:
      - ./server:/var/www/html
      - ./server/uploads:/var/www/html/uploads
    environment:
      - DB_HOST=mysql
      - DB_NAME=nodegram
      - DB_USER=nodegram
      - DB_PASS=nodegrampassword
      - ENVIRONMENT=development
      - DEBUG=true
    depends_on:
      - mysql
    networks:
      - nodegram_network

  # React Client (Development)
  react_client:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    container_name: nodegram_react
    restart: unless-stopped
    ports:
      - "5173:5173"
    volumes:
      - ./client:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_FRONTEND_URL=http://localhost:5173
      - VITE_DEBUG=true
    depends_on:
      - php_server
    networks:
      - nodegram_network

  # Nginx (Production)
  nginx:
    image: nginx:alpine
    container_name: nodegram_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./client/dist:/var/www/html
      - ./server:/var/www/html/api
    depends_on:
      - php_server
    networks:
      - nodegram_network
    profiles:
      - production

  # Redis (Optional - for caching)
  redis:
    image: redis:7-alpine
    container_name: nodegram_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - nodegram_network
    profiles:
      - optional

  # Mailhog (Development email testing)
  mailhog:
    image: mailhog/mailhog
    container_name: nodegram_mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - nodegram_network
    profiles:
      - development

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  nodegram_network:
    driver: bridge
